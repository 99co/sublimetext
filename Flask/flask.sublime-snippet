<snippet>
    <content><![CDATA[
import os
import re
import datetime

from flask import g
from flask import Flask
from flask import request
from flask import render_template
from flask.ext.login import current_user

import filters
import settings
from core import db
from core import utils
from core.decorators import only
from core.errors import *

app = Flask(__name__)

app.config.from_object(settings.CONFIG)
app.config.from_pyfile("settings_dev.cfg", silent=True)
app.db = db.DB(app.config['DB_DEFAULT'])
app.json_encoder = utils.JSONEncoder

# Custom template renderers
app.jinja_env.add_extension('pyjade.ext.jinja.PyJadeExtension')

# Filters
for f in dir(filters):
    if f.startswith("fl_") and hasattr(getattr(filters, f), '__call__'):
        app.jinja_env.filters[f[3:]] = getattr(filters, f)

# Blueprints
for bp in settings.BLUEPRINTS:
    mod, sep, b = bp['name'].rpartition(".")
    m = __import__(mod, fromlist=[b])
    app.register_blueprint(getattr(m, b), url_prefix=bp['url_prefix'])

# Extensions
for e in settings.INSTALLED_EXTENSIONS:
    mod, sep, ext = e.rpartition(".")
    m = __import__(mod, fromlist=[ext])
    m = getattr(m, ext)
    m.configure(app)

# Exception handlers and loggers
app.register_error_handler(BaseError, utils.handle_error)
app.logger.addHandler(utils.HipChatHandler())

@app.errorhandler(404)
def four_oh_four(e):
    return render_template("404.html"), 404


if __name__ == "__main__":
    # Bind to PORT if defined, otherwise default to 5000.
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>flask</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
</snippet>
